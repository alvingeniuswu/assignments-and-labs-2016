////  main.cpp//  lab1////  Created by ÎâË¼Ñï on 16/6/10.//  Copyright ı 2016Äê ÎâË¼Ñï. All rights reserved.//#include<iostream>#include <thread>#include <mutex>#include <unistd.h>using namespace std;int Buffer = 4;mutex Lock_mutex;int I = 0;int for_num;void Producer(int num_producer){    int waiting = 0;    while (I<for_num)    {        Lock_mutex.lock();        if (Buffer < 10)        {            if (waiting==1)            {                waiting = 0;                printf("# Producer %d: resumd\n",num_producer);            }            Buffer++;            printf("# Producer %d : %d -> %d\n", num_producer,Buffer-1,Buffer);        }        else if(waiting==0)        {            printf ("# Producer %d :waiting\n",num_producer);            waiting = 1;        }        Lock_mutex.unlock();        if (waiting==0)        {            I++;            sleep(10);        }    }}void Consumer(int num_consumer){    int waiting = 0;    while (I<for_num)    {        Lock_mutex.lock();        if (Buffer >0)        {            if (waiting==1)            {                waiting = 0;                printf("# Consumer %d: resumd\n",num_consumer);            }            Buffer--;            printf("# Consumer %d : %d -> %d\n", num_consumer,Buffer+1,Buffer);        }        else if(waiting==0)        {            printf ("# Consumer %d :waiting\n",num_consumer);            waiting = 1;        }        Lock_mutex.unlock();        if (waiting==0)        {            I++;            sleep(10);        }    }}int main(){    int num_producer, num_consumer;    printf("ÇëÊäÈëÉú²úÕßÊıÁ¿\n" );    scanf("%d",&num_producer);    printf("ÇëÊäÈëÏû·ÑÕßÊıÁ¿\n");    scanf("%d",&num_consumer);    printf("ÔËĞĞ´ÎÊı\n");    scanf("%d",&for_num);        thread Tread_pro[10];    thread Tread_con[10];        for (int i = 0; i < num_producer; i++){        Tread_pro[i] = thread(Producer,i);    }        for (int i = 0; i < num_consumer; i++){        Tread_con[i] = thread(Consumer,i);    }        for (int i = 0; i < num_producer; i++){        Tread_pro[i].join();    }        for (int i = 0; i < num_consumer; i++){        Tread_con[i].join();    }    return 0;}